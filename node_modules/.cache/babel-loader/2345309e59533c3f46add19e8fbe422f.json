{"ast":null,"code":"import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\n\nfunction setTransformValue(factor, newFactor, key) {\n  var _a;\n\n  const newValue = newFactor[key];\n\n  if (newValue !== undefined) {\n    factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n  }\n}\n\nexport class Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n    this._mutationObserver = !isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    }) : undefined;\n  }\n\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n\n  clear() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          trailFill = this._trailFill;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n\n  destroy() {\n    var _a, _b;\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    if (this._generated) {\n      (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    this.stop();\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n\n  draw(cb) {\n    if (!this._context) {\n      return;\n    }\n\n    return cb(this._context);\n  }\n\n  drawParticle(particle, delta) {\n    var _a;\n\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n\n    const radius = particle.getRadius();\n\n    if (radius <= 0) {\n      return;\n    }\n\n    const pfColor = particle.getFillColor(),\n          psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n\n    if (!fColor) {\n      fColor = pfColor;\n    }\n\n    if (!sColor) {\n      sColor = psColor;\n    }\n\n    if (!fColor && !sColor) {\n      return;\n    }\n\n    this.draw(ctx => {\n      var _a, _b, _c, _d;\n\n      const options = this.container.actualOptions,\n            zIndexOptions = particle.options.zIndex,\n            zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate,\n            opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n            strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity,\n            zOpacity = opacity * zOpacityFactor,\n            zStrokeOpacity = strokeOpacity * zOpacityFactor,\n            transform = {},\n            colorStyles = {\n        fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n      };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n\n      drawParticle({\n        container: this.container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => {\n      drawParticlePlugin(ctx, plugin, particle, delta);\n    });\n  }\n\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => {\n      drawPlugin(ctx, plugin, delta);\n    });\n  }\n\n  async init() {\n    var _a;\n\n    this.resize();\n\n    this._initStyle();\n\n    this._initCover();\n\n    try {\n      await this._initTrail();\n    } catch (e) {\n      console.error(e);\n    }\n\n    this.initBackground();\n\n    if (this.element) {\n      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n        attributes: true\n      });\n    }\n\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n\n  initBackground() {\n    const options = this.container.actualOptions,\n          background = options.background,\n          element = this.element,\n          elementStyle = element === null || element === void 0 ? void 0 : element.style;\n\n    if (!elementStyle) {\n      return;\n    }\n\n    if (background.color) {\n      const color = rangeColorToRgb(background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n\n  initPlugins() {\n    this._resizePlugins = [];\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n\n      if (plugin.particleFillColor || plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n\n      if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n\n  loadCanvas(canvas) {\n    var _a, _b;\n\n    if (this._generated) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this._context = this.element.getContext(\"2d\");\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n      attributes: true\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n\n        this._paintBase(this._coverColorStyle);\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    const container = this.container,\n          pxRatio = container.retina.pixelRatio,\n          size = container.canvas.size,\n          newSize = {\n      width: this.element.offsetWidth * pxRatio,\n      height: this.element.offsetHeight * pxRatio\n    };\n\n    if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n      return;\n    }\n\n    const oldSize = Object.assign({}, size);\n    this.element.width = size.width = this.element.offsetWidth * pxRatio;\n    this.element.height = size.height = this.element.offsetHeight * pxRatio;\n\n    if (this.container.started) {\n      this.resizeFactor = {\n        width: size.width / oldSize.width,\n        height: size.height / oldSize.height\n      };\n    }\n  }\n\n  stop() {\n    this.draw(ctx => {\n      clear(ctx, this.size);\n    });\n  }\n\n  async windowResize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.resize();\n    const container = this.container,\n          needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n\n    this._applyResizePlugins();\n\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n\n  _applyPostDrawUpdaters(particle) {\n    var _a;\n\n    for (const updater of this._postDrawUpdaters) {\n      (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n    var _a;\n\n    for (const updater of this._preDrawUpdaters) {\n      if (updater.getColorStyles) {\n        const {\n          fill,\n          stroke\n        } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n\n        if (fill) {\n          colorStyles.fill = fill;\n        }\n\n        if (stroke) {\n          colorStyles.stroke = stroke;\n        }\n      }\n\n      if (updater.getTransformValues) {\n        const updaterTransform = updater.getTransformValues(particle);\n\n        for (const key in updaterTransform) {\n          setTransformValue(transform, updaterTransform, key);\n        }\n      }\n\n      (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n    }\n  }\n\n  _applyResizePlugins() {\n    for (const plugin of this._resizePlugins) {\n      if (plugin.resize) {\n        plugin.resize();\n      }\n    }\n  }\n\n  _getPluginParticleColors(particle) {\n    let fColor, sColor;\n\n    for (const plugin of this._colorPlugins) {\n      if (!fColor && plugin.particleFillColor) {\n        fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n      }\n\n      if (!sColor && plugin.particleStrokeColor) {\n        sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n      }\n\n      if (fColor && sColor) {\n        break;\n      }\n    }\n\n    return [fColor, sColor];\n  }\n\n  _initCover() {\n    const options = this.container.actualOptions,\n          cover = options.backgroundMask.cover,\n          color = cover.color,\n          coverRgb = rangeColorToRgb(color);\n\n    if (coverRgb) {\n      const coverColor = {\n        r: coverRgb.r,\n        g: coverRgb.g,\n        b: coverRgb.b,\n        a: cover.opacity\n      };\n      this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n    }\n  }\n\n  _initStyle() {\n    const element = this.element,\n          options = this.container.actualOptions;\n\n    if (!element) {\n      return;\n    }\n\n    if (this._fullScreen) {\n      this._originalStyle = deepExtend({}, element.style);\n\n      this._setFullScreenStyle();\n    } else {\n      this._resetOriginalStyle();\n    }\n\n    for (const key in options.style) {\n      if (!key || !options.style) {\n        continue;\n      }\n\n      const value = options.style[key];\n\n      if (!value) {\n        continue;\n      }\n\n      element.style.setProperty(key, value, \"important\");\n    }\n  }\n\n  async _initTrail() {\n    const options = this.container.actualOptions,\n          trail = options.particles.move.trail,\n          trailFill = trail.fill;\n\n    if (!trail.enable) {\n      return;\n    }\n\n    if (trailFill.color) {\n      const fillColor = rangeColorToRgb(trailFill.color);\n\n      if (!fillColor) {\n        return;\n      }\n\n      const trail = options.particles.move.trail;\n      this._trailFill = {\n        color: Object.assign({}, fillColor),\n        opacity: 1 / trail.length\n      };\n    } else {\n      await new Promise((resolve, reject) => {\n        if (!trailFill.image) {\n          return;\n        }\n\n        const img = document.createElement(\"img\");\n        img.addEventListener(\"load\", () => {\n          this._trailFill = {\n            image: img,\n            opacity: 1 / trail.length\n          };\n          resolve();\n        });\n        img.addEventListener(\"error\", evt => {\n          reject(evt.error);\n        });\n        img.src = trailFill.image;\n      });\n    }\n  }\n\n  _paintBase(baseColor) {\n    this.draw(ctx => {\n      paintBase(ctx, this.size, baseColor);\n    });\n  }\n\n  _paintImage(image, opacity) {\n    this.draw(ctx => {\n      paintImage(ctx, this.size, image, opacity);\n    });\n  }\n\n  _repairStyle() {\n    var _a, _b;\n\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n\n    this._initStyle();\n\n    this.initBackground();\n    (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n      attributes: true\n    });\n  }\n\n  _resetOriginalStyle() {\n    const element = this.element,\n          originalStyle = this._originalStyle;\n\n    if (!(element && originalStyle)) {\n      return;\n    }\n\n    element.style.position = originalStyle.position;\n    element.style.zIndex = originalStyle.zIndex;\n    element.style.top = originalStyle.top;\n    element.style.left = originalStyle.left;\n    element.style.width = originalStyle.width;\n    element.style.height = originalStyle.height;\n  }\n\n  _setFullScreenStyle() {\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const priority = \"important\";\n    element.style.setProperty(\"position\", \"fixed\", priority);\n    element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n    element.style.setProperty(\"top\", \"0\", priority);\n    element.style.setProperty(\"left\", \"0\", priority);\n    element.style.setProperty(\"width\", \"100%\", priority);\n    element.style.setProperty(\"height\", \"100%\", priority);\n  }\n\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","deepExtend","isSsr","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","_a","newValue","undefined","Canvas","constructor","container","size","height","width","_context","_generated","_preDrawUpdaters","_postDrawUpdaters","_resizePlugins","_colorPlugins","_mutationObserver","MutationObserver","records","record","type","attributeName","_repairStyle","_fullScreen","actualOptions","fullScreen","enable","options","trail","particles","move","trailFill","_trailFill","backgroundMask","paint","length","color","_paintBase","opacity","image","_paintImage","draw","ctx","destroy","_b","disconnect","element","remove","_resetOriginalStyle","stop","cb","particle","delta","spawning","destroyed","radius","getRadius","pfColor","getFillColor","psColor","getStrokeColor","fColor","sColor","_getPluginParticleColors","_c","_d","zIndexOptions","zIndex","zOpacityFactor","zIndexFactor","opacityRate","bubble","value","strokeOpacity","zOpacity","zStrokeOpacity","transform","colorStyles","fill","stroke","_applyPreDrawUpdaters","context","composite","sizeRate","shadow","_applyPostDrawUpdaters","plugin","init","resize","_initStyle","_initCover","_initTrail","e","console","error","initBackground","observe","attributes","initUpdaters","initPlugins","background","elementStyle","style","backgroundColor","backgroundImage","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","push","particleFillColor","particleStrokeColor","updater","updaters","afterDraw","getColorStyles","getTransformValues","beforeDraw","loadCanvas","canvas","dataset","ariaHidden","_originalStyle","offsetHeight","offsetWidth","getContext","retina","cover","_coverColorStyle","pxRatio","pixelRatio","newSize","oldSize","Object","assign","started","resizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","_applyResizePlugins","refresh","call","updaterTransform","coverRgb","coverColor","r","g","b","a","_setFullScreenStyle","setProperty","fillColor","Promise","resolve","reject","img","document","createElement","addEventListener","evt","src","baseColor","originalStyle","top","left","priority","toString"],"sources":["/Users/azavip/Desktop/personal-portfolio/node_modules/tsparticles-engine/esm/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils\";\nimport { deepExtend, isSsr } from \"../Utils/Utils\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { generatedAttribute } from \"./Utils/Constants\";\nfunction setTransformValue(factor, newFactor, key) {\n    var _a;\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n    }\n}\nexport class Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n        this._mutationObserver =\n            !isSsr() && typeof MutationObserver !== \"undefined\"\n                ? new MutationObserver((records) => {\n                    for (const record of records) {\n                        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                            this._repairStyle();\n                        }\n                    }\n                })\n                : undefined;\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else {\n            this.draw((ctx) => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        var _a, _b;\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        if (this._generated) {\n            (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this.stop();\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        if (!this._context) {\n            return;\n        }\n        return cb(this._context);\n    }\n    drawParticle(particle, delta) {\n        var _a;\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= 0) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            var _a, _b, _c, _d;\n            const options = this.container.actualOptions, zIndexOptions = particle.options.zIndex, zOpacityFactor = (1 - particle.zIndexFactor) ** zIndexOptions.opacityRate, opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1, strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container: this.container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * (1 - particle.zIndexFactor) ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw((ctx) => {\n            drawParticlePlugin(ctx, plugin, particle, delta);\n        });\n    }\n    drawPlugin(plugin, delta) {\n        this.draw((ctx) => {\n            drawPlugin(ctx, plugin, delta);\n        });\n    }\n    async init() {\n        var _a;\n        this.resize();\n        this._initStyle();\n        this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            console.error(e);\n        }\n        this.initBackground();\n        if (this.element) {\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, { attributes: true });\n        }\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element, elementStyle = element === null || element === void 0 ? void 0 : element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        var _a, _b;\n        if (this._generated) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this._context = this.element.getContext(\"2d\");\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, { attributes: true });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw((ctx) => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                this._paintBase(this._coverColorStyle);\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        const container = this.container, pxRatio = container.retina.pixelRatio, size = container.canvas.size, newSize = {\n            width: this.element.offsetWidth * pxRatio,\n            height: this.element.offsetHeight * pxRatio,\n        };\n        if (newSize.height === size.height &&\n            newSize.width === size.width &&\n            newSize.height === this.element.height &&\n            newSize.width === this.element.width) {\n            return;\n        }\n        const oldSize = Object.assign({}, size);\n        this.element.width = size.width = this.element.offsetWidth * pxRatio;\n        this.element.height = size.height = this.element.offsetHeight * pxRatio;\n        if (this.container.started) {\n            this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height,\n            };\n        }\n    }\n    stop() {\n        this.draw((ctx) => {\n            clear(ctx, this.size);\n        });\n    }\n    async windowResize() {\n        if (!this.element) {\n            return;\n        }\n        this.resize();\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n    _applyPostDrawUpdaters(particle) {\n        var _a;\n        for (const updater of this._postDrawUpdaters) {\n            (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n        var _a;\n        for (const updater of this._preDrawUpdaters) {\n            if (updater.getColorStyles) {\n                const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                if (fill) {\n                    colorStyles.fill = fill;\n                }\n                if (stroke) {\n                    colorStyles.stroke = stroke;\n                }\n            }\n            if (updater.getTransformValues) {\n                const updaterTransform = updater.getTransformValues(particle);\n                for (const key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                }\n            }\n            (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n        }\n    }\n    _applyResizePlugins() {\n        for (const plugin of this._resizePlugins) {\n            if (plugin.resize) {\n                plugin.resize();\n            }\n        }\n    }\n    _getPluginParticleColors(particle) {\n        let fColor, sColor;\n        for (const plugin of this._colorPlugins) {\n            if (!fColor && plugin.particleFillColor) {\n                fColor = rangeColorToHsl(plugin.particleFillColor(particle));\n            }\n            if (!sColor && plugin.particleStrokeColor) {\n                sColor = rangeColorToHsl(plugin.particleStrokeColor(particle));\n            }\n            if (fColor && sColor) {\n                break;\n            }\n        }\n        return [fColor, sColor];\n    }\n    _initCover() {\n        const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color, coverRgb = rangeColorToRgb(color);\n        if (coverRgb) {\n            const coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity,\n            };\n            this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n    }\n    _initStyle() {\n        const element = this.element, options = this.container.actualOptions;\n        if (!element) {\n            return;\n        }\n        if (this._fullScreen) {\n            this._originalStyle = deepExtend({}, element.style);\n            this._setFullScreenStyle();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        for (const key in options.style) {\n            if (!key || !options.style) {\n                continue;\n            }\n            const value = options.style[key];\n            if (!value) {\n                continue;\n            }\n            element.style.setProperty(key, value, \"important\");\n        }\n    }\n    async _initTrail() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n        if (!trail.enable) {\n            return;\n        }\n        if (trailFill.color) {\n            const fillColor = rangeColorToRgb(trailFill.color);\n            if (!fillColor) {\n                return;\n            }\n            const trail = options.particles.move.trail;\n            this._trailFill = {\n                color: Object.assign({}, fillColor),\n                opacity: 1 / trail.length,\n            };\n        }\n        else {\n            await new Promise((resolve, reject) => {\n                if (!trailFill.image) {\n                    return;\n                }\n                const img = document.createElement(\"img\");\n                img.addEventListener(\"load\", () => {\n                    this._trailFill = {\n                        image: img,\n                        opacity: 1 / trail.length,\n                    };\n                    resolve();\n                });\n                img.addEventListener(\"error\", (evt) => {\n                    reject(evt.error);\n                });\n                img.src = trailFill.image;\n            });\n        }\n    }\n    _paintBase(baseColor) {\n        this.draw((ctx) => {\n            paintBase(ctx, this.size, baseColor);\n        });\n    }\n    _paintImage(image, opacity) {\n        this.draw((ctx) => {\n            paintImage(ctx, this.size, image, opacity);\n        });\n    }\n    _repairStyle() {\n        var _a, _b;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n        this._initStyle();\n        this.initBackground();\n        (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, { attributes: true });\n    }\n    _resetOriginalStyle() {\n        const element = this.element, originalStyle = this._originalStyle;\n        if (!(element && originalStyle)) {\n            return;\n        }\n        element.style.position = originalStyle.position;\n        element.style.zIndex = originalStyle.zIndex;\n        element.style.top = originalStyle.top;\n        element.style.left = originalStyle.left;\n        element.style.width = originalStyle.width;\n        element.style.height = originalStyle.height;\n    }\n    _setFullScreenStyle() {\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const priority = \"important\";\n        element.style.setProperty(\"position\", \"fixed\", priority);\n        element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n        element.style.setProperty(\"top\", \"0\", priority);\n        element.style.setProperty(\"left\", \"0\", priority);\n        element.style.setProperty(\"width\", \"100%\", priority);\n        element.style.setProperty(\"height\", \"100%\", priority);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}