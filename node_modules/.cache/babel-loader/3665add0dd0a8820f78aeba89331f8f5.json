{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\n\nconst fixOutMode = data => {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n\n  destroy(override) {\n    var _a;\n\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.particleDestroyed) {\n        updater.particleDestroyed(this, override);\n      }\n    }\n\n    (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getFillColor() {\n    var _a;\n\n    return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n  }\n\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    var _a;\n\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n\n  getStrokeColor() {\n    var _a;\n\n    return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n  }\n\n  init(id, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    const container = this.container,\n          engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.fill = true;\n    this.pathRotation = false;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n          mainOptions = container.actualOptions,\n          particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n          shapeType = particlesOptions.shape.type,\n          {\n      reduceDuplicates\n    } = particlesOptions;\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const shapeOptions = particlesOptions.shape;\n\n    if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n      const overrideShapeType = overrideOptions.shape.type,\n            shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n\n      if (shape) {\n        this.shape = shape;\n        shapeOptions.load(overrideOptions.shape);\n      }\n    }\n\n    this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n    this.interactivity = new Interactivity(engine, container);\n    this.interactivity.load(container.actualOptions.interactivity);\n    this.interactivity.load(particlesOptions.interactivity);\n    this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n    this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getValue(pathOptions.delay) * 1000;\n\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value,\n          sizeAnimation = sizeOptions.animation;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n\n    if (sizeAnimation.enable) {\n      this.size.status = \"increasing\";\n      this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = \"increasing\";\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size);\n          this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = \"decreasing\";\n          break;\n      }\n    }\n\n    this.size.initialValue = this.size.value;\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    const canvasSize = container.canvas.size,\n          moveCenter = Object.assign({}, this.options.move.center),\n          isCenterPercent = moveCenter.mode === \"percent\";\n    this.moveCenter = {\n      x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n      y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n      radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n      mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = this._engine.plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n\n    for (const updater of container.particles.updaters) {\n      updater.init(this);\n    }\n\n    for (const mover of container.particles.movers) {\n      (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n    }\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  reset() {\n    var _a;\n\n    for (const updater of this.container.particles.updaters) {\n      (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n    }\n  }\n\n  _calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b, _c, _d;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n      size: canvasSize,\n      position: position\n    }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-horizontal\"],\n        coord: pos.x,\n        maxCoord: container.canvas.size.width,\n        setCb: value => pos.x += value,\n        radius\n      });\n    },\n          fixVertical = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-vertical\"],\n        coord: pos.y,\n        maxCoord: container.canvas.size.height,\n        setCb: value => pos.y += value,\n        radius\n      });\n    };\n\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n    if (this._checkOverlap(pos, tryCount)) {\n      return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  _calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move;\n\n    if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n      return res;\n    }\n\n    const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= getRandom();\n    }\n\n    return res;\n  }\n\n  _checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  _getRollColor(color) {\n    var _a;\n\n    if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n      return color;\n    }\n\n    const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n          backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n          rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n    if (!rolled) {\n      return color;\n    }\n\n    if (this.backColor) {\n      return this.backColor;\n    }\n\n    if (this.roll.alter) {\n      return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n    }\n\n    return color;\n  }\n\n  _loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n    }\n  }\n\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_engine","init","destroy","override","_a","unbreakable","destroyed","bubble","inRange","slow","plugin","plugins","particleDestroyed","updater","particles","updaters","pathGenerator","reset","draw","delta","canvas","drawParticlePlugin","drawParticle","getFillColor","_getRollColor","color","getMass","getRadius","Math","PI","getPosition","x","offset","y","z","size","value","getStrokeColor","strokeColor","_b","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","type","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","initialValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","call","particleInit","particleCreated","isInsideCanvas","isVisible","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","angle","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array","roll","backColor","alter","backFactor","horizontal","vertical","backSum","rolled","floor"],"sources":["/Users/azavip/Desktop/personal-portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        var _a;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color));\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a;\n        return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor));\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = \"increasing\";\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = \"increasing\";\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size);\n                    this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = \"decreasing\";\n                    break;\n            }\n        }\n        this.size.initialValue = this.size.value;\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _getRollColor(color) {\n        var _a;\n        if (!color || !this.roll || (!this.backColor && !this.roll.alter)) {\n            return color;\n        }\n        const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n        if (!rolled) {\n            return color;\n        }\n        if (this.backColor) {\n            return this.backColor;\n        }\n        if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n        return color;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}